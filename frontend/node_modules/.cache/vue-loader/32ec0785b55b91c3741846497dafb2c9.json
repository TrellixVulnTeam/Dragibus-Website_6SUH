{"remainingRequest":"C:\\WebstormProjects\\Dragibus-Website\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\WebstormProjects\\Dragibus-Website\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\WebstormProjects\\Dragibus-Website\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WebstormProjects\\Dragibus-Website\\frontend\\src\\components\\Home.vue?vue&type=template&id=8dc7cce2&scoped=true&","dependencies":[{"path":"C:\\WebstormProjects\\Dragibus-Website\\frontend\\src\\components\\Home.vue","mtime":1623708068045},{"path":"C:\\WebstormProjects\\Dragibus-Website\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WebstormProjects\\Dragibus-Website\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\WebstormProjects\\Dragibus-Website\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WebstormProjects\\Dragibus-Website\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}