{"remainingRequest":"C:\\WebstormProjects\\Dragibus_Website\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\WebstormProjects\\Dragibus_Website\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\WebstormProjects\\Dragibus_Website\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\WebstormProjects\\Dragibus_Website\\frontend\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"C:\\WebstormProjects\\Dragibus_Website\\frontend\\src\\App.vue","mtime":1623623819946},{"path":"C:\\WebstormProjects\\Dragibus_Website\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WebstormProjects\\Dragibus_Website\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\WebstormProjects\\Dragibus_Website\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\WebstormProjects\\Dragibus_Website\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}